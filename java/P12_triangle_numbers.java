/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Solution: 76576500
*/

public class P12_triangle_numbers{
	// returns the nth triangle number
	public static long getTriangle (long n) {
		return (n * (n + 1))/2;
	}

	// Given a triangle number, returns the number of divisors
	// We only have to iterate till sqrt(tri) and
	// if tri%i == 0 then tri/i % i is also 0
	// Finally, we have to handle the case where tri could be
	// a perfect square
	public static int countDivisor(long tri) {
		int divisor_limit = 500;
		long sqrt_limit = (long) Math.ceil(Math.sqrt(tri));
		int num_divisors = 2; // Preinclude 1 and tri itself
		for (int i = 2; i < sqrt_limit + 1; i++) {
			if (tri % i == 0) {
				int a = i;
				int b = (int) tri/i;
				if (a == b) 
					num_divisors++;
				else
					num_divisors += 2;
			}
			if (num_divisors == 500)
				return divisor_limit;
		}
		return num_divisors;
	}

	public static void main(String[] args) {
		int num_divisors = 0;
		int idx = 0;
		long tri = 0;
		while (num_divisors < 500){
			idx++;
			tri = getTriangle(idx);
			num_divisors = countDivisor(tri);
		}

		System.out.println("Triangle number with (over) 500 divisors is: " + tri);
	}
}







